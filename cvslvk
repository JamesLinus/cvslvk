#!/bin/bash
# Вспомогательный скрипт для работы с CVS в ЛВК

if test "$CL_DIR" = ""; then
  echo 'CL_DIR is not set' 1>&2
  exit 1
fi

realls=`which ls`
ls()
{
  eval `locale | sed 's/\([^=]*\).*/\1=C/'` $realls $@
}

# Файл, создаваемый по cvslvk make_rules
RULES_CVSLVK=$CL_DIR/rules.cvslvk
RULES_CVSLVK_TMP=$CL_DIR/rules.cvslvk.tmp.$$  # Временная копия того же файла

# Группа пользователей CVS
CVSGROUP=stand

# Полные имена следующих двух файлов получаются добавлением к ним -<arch>-<os>
# Префикс файла со списком рабочих инсталляций и их требований
WILIST=$CL_DIR/wilist

MYPID=$$
kill_make()
{
  MAKEPID=`(echo $MYPID; ps -l) | awk -f $CL_DIR/getppid.awk`
  kill $MAKEPID;
  exit 1;
}


choose_chgrp_and_chmod()
{
  clgroup=`ls -Lld $CL_DIR | awk '{print($4)}'`
  if test "$clgroup" = "$CVSGROUP"; then
    CHGRP=chgrp
    CHMOD=chmod
  else
    CHGRP=true
    CHMOD=true
  fi
}


echo_build_error()
{
      echo 1>&2
      echo "*** ERROR ***" 1>&2
      echo 1>&2
}


# error сообщение
error()
{
  echo_build_error
  echo $* 1>&2
  echo 1>&2
  kill_make
}


# check_vars ИМЯ=значение [значение1 ...] -- ...
check_vars()
{
  error=0
  while test "" != "$1"; do
    var=`echo $1 | cut -f1 -d=`
    value=`echo $1 | cut -f2 -d=`
    shift
    if test "--" = "$1"; then
      if test "" = "$value"; then
        if test $error -eq 0; then echo_build_error; fi
        echo "Variable '$var' is not set." 1>&2
        error=1
      fi
    else
      found=0
      alts=""
      while test "--" != "$1"; do
        alts="$alts $1"
        if test "$value" = "$1"; then found=1; fi
	shift
      done
      if test $found -eq 0; then
        if test $error -eq 0; then echo_build_error; fi
        echo "Bad value '$value' of variable '$var' (supported values:$alts)." 1>&2
        error=1
      fi
    fi
    shift
  done

  if test $error -eq 1; then echo 1>&2; kill_make; fi
}


# get_arch
get_arch()
{
  echo "x86-linux"
}

# make_rules
# Создает $CL_DIR/rules.cvslvk и $CL_DIR/wilist*
make_rules()
{
  cd $CL_DIR

  echo "# This file is automatically generated by 'cvslvk make_rules'" > $RULES_CVSLVK_TMP
  for i in */rules.cvslvk; do
    if test -f $i; then
      dir=`dirname $i`
      echo >> $RULES_CVSLVK_TMP
      echo 'ifneq ($(filter '$dir',$(CL_WI_LIST)),)' >> $RULES_CVSLVK_TMP
      echo 'override CL_WI := $(CL_DIR)'/$dir >> $RULES_CVSLVK_TMP
      echo '-include $(CL_DIR)/'$i >> $RULES_CVSLVK_TMP
      echo 'endif' >> $RULES_CVSLVK_TMP
    fi
  done
  mv $RULES_CVSLVK_TMP $RULES_CVSLVK
  choose_chgrp_and_chmod
  $CHGRP $CVSGROUP $RULES_CVSLVK
  $CHMOD 664 $RULES_CVSLVK

  for d in *_*; do if test -d $d; then
    postfix=`echo $d | cut -f2 -d_ | cut -f1-2 -d-`
    echo "$d `cat $d/depend.cvslvk 2>/dev/null | tr '\n' ' '`" >> $WILIST-$postfix.tmp.$$
  fi; done
  for i in $WILIST-*; do
    test "`basename $i`" = "`basename $i .tmp.$$`" -a ! -f $i.tmp && rm -f $i;
  done
  for i in $WILIST-*.tmp.$$; do mv $i `basename $i .tmp.$$`; done
  chmod 644 $WILIST-* 2>/dev/null

  $CHGRP $CVSGROUP $WILIST-* 2>/dev/null
  $CHMOD g+w $WILIST-* 2>/dev/null
}

find_dep()
{
  postfix=`get_arch`
  wilist="$WILIST-$postfix"
  local NO_WI_FOUND=0
  for MODULE in $*; do
    WI_NAME=$(awk "/^${MODULE}_/ {print \$1; exit}" "$wilist")
    if [ -n "$WI_NAME" ];then
      echo "$WI_NAME"
      DEPENDECES=$(awk "/^${MODULE}_/ {\$1=\"\"; print \$0; exit}" "$wilist")
      find_dep $DEPENDECES || NO_WI_FOUND=1
    else
      echo "*** No WI found for module $MODULE."
      NO_WI_FOUND=1
    fi
  done
  return $NO_WI_FOUND
}

# show_wi <параметры process_wi>
show_wi()
{
  find_dep "$*" | LANG=C sort -u >&2
  kill_make
}

process_wi()
{
  if test "$1" = "in_clean"; then in_clean=1; shift; else in_clean=0; fi
  WI_LIST=$(find_dep $*)
  if [ $? -ne 0 ];then
    if [ $in_clean -eq 0 ];then
      echo_build_error
      echo "$WI_LIST" | grep "^\*\*\*" | sort -u >&2
      kill_make
    else
      echo "$WI_LIST" | grep "^\*\*\*" | sort -u >&2
      echo "*** clean may be incomplete" >&2
      echo >&2
    fi
  fi
  echo "$WI_LIST" | grep -v "^\*\*\*" | sort -u
}

# setup_bd <имя каталога сборки>
setup_bd()
{
  mkdir -p $1
  touch $1/CVSLVK_BUILD_DIR
  # Удалить ссылки, показывающие на какие-либо WI
  # Для этого надо выделать X - первый элемент в назначении ссылки и проверить
  # наличие X/CVSLVK_BUILD_DIR
  (echo */CVSLVK_BUILD_DIR; ls -l) | awk '
    BEGIN {m=0}
    m==0 {m=1;
          for (i=1; i<=NF; i++) {
	    split($i,a,"/")
	    if (a[1]!="'$1'")  bd[a[1]]=1
	  }
	  next
	 }
    NF==11 {split($11,a,"/")
            if (bd[a[1]]==1)  print("rm -f " $9)
	   }' | sh
}


# remove_old_symlinks <список CL_SYMLINKS>
# Требуется удалить symlinks, указывающие куда-то в CL_DIR и отсутствующие в списке
remove_old_symlinks()
{
  ( ls -l | grep '^'$CL_DIR;
    echo
    echo $*
  ) | awk '/^$/ {getline;
	         for (i=1; i<=NF; i++) {
		   n=split($i,a,"/")
		   remove[a[n]]=0;
		 }
	         printf("rm -f");
	         for (i in remove) if (remove[i]==1) printf(" "i)
		 exit}
	   {remove[$9]=1}' | sh
}


# cleanall
cleanall()
{
  for i in */CVSLVK_BUILD_DIR; do
    if test -f $i; then
      d=`dirname $i`
      symlinks=`cat $d/SYMLINKS 2>/dev/null`
      echo rm -rf $symlinks $d
      rm -rf $symlinks $d
    fi
  done
}


# complete_wi <полное имя инсталляции>
complete_wi()
{
  scm=""
  branch=$(git name-rev --name-only HEAD 2>/dev/null)
  if [ "$branch" ]; then
    scm="git"
    head=$(git log -1 --pretty=format:%h 2>/dev/null)
    git update-index --refresh -q >/dev/null
    if ! git diff-index --quiet HEAD .;then
      head="+$head"
    fi
  else
    branch=$(svn info 2>/dev/null | sed -n 's/^URL: //p')
    if [ "$branch" ]; then
      scm="svn"
      head=$(LANG=C svnversion -n .| sed 's/^\(.*\)M/+\1/')
    fi
  fi

  cd $CL_DIR

  if [ "$scm" ]; then
    echo
    echo "$scm $head $branch" > $1/revision
    printf "scm head branch\n$scm $head $branch\n" | column -t
  fi

  choose_chgrp_and_chmod
  find $1 -exec $CHGRP $CVSGROUP \{\} \; 2>/dev/null
  find $1 -exec $CHMOD ug+rw \{\} \; 2>/dev/null
  find $1 -perm -100 -exec $CHMOD g+rwx \{\} \; 2>/dev/null
  find $1 -exec chmod a+r \{\} \; 2>/dev/null
  find $1 -perm -100 -exec chmod a+rx \{\} \; 2>/dev/null

  make_rules
}


# remove_wi <полное имя инсталляции> ...
remove_wi()
{
  cd $CL_DIR
  test $# -eq 0 && return 0

  res=0
  for i in $*; do
    if test ! -d $i; then
      echo "No such working installation $i" 1>&2
      res=1
    fi
    if test -f $i/NOREMOVE; then
      echo "$i/NOREMOVE file exists - skipping this WI"
      res=1
    else
      rm -rf $i
    fi
  done

  make_rules
  return $res
}


# liborder <ограничения> -- <библиотеки>
liborder()
{
  cons=""
  while test "x$1" != "x--"; do
    if test "x$cons" = "x"; then cons="$1"; else cons="$cons $1"; fi
    shift
  done
  shift
  libs="$*"
  if printf "%s\n%s\n" "$cons" "$libs" | awk -f $CL_DIR/liborder.awk >/dev/null; then
    printf "%s\n%s\n" "$cons" "$libs" | awk -f $CL_DIR/liborder.awk
    return 0
  else
    echo_build_error
    printf "%s\n%s\n" "$cons" "$libs" | awk -f $CL_DIR/liborder.awk 1>&2
    echo 1>&2
    kill_make
  fi
}


# touchap <CL_BD> [файл параметры] -- ...
touchap()
{
  CL_BD=$1; shift;
  while test "x$1" != "x"; do
    file=$CL_BD/$1; shift
    params="";
    while test "x$1" != "x--" -a "x$1" != "x"; do params="$params $1"; shift; done
    test "x$1" = "x--" && shift
    if test ! -f $file; then
      printf "%s" "$params" > $file
    else
      test "x$params" = "x`cat $file`" || printf "%s" "$params" > $file
    fi
  done
}


# install [каталог] - инсталляция из указанного или из текущего каталога
install()
{
  test x"$1" != x && cd $1
  choose_chgrp_and_chmod
 # Собственно установка
  (cd $CL_DIR && rm -f *.awk Makefile.cvslvk cvslvk)
  cp Makefile.cvslvk cvslvk getppid.awk liborder.awk cppargs.awk $CL_DIR/
 # Удаление устаревших псевдомодулей
  for i in $CL_DIR/*/REMOVE_ON_CVSLVK_UPDATE; do
    test -f $i && rm -rf `dirname $i`
  done
 # Установка/обновление псевдомодулей
  test -f ./pseudo/install && (cd ./pseudo&&./install)
 # Установка прав
  cd $CL_DIR
  $CHGRP $CVSGROUP * 2>/dev/null
  $CHMOD ug+w * 2>/dev/null
 # Окончание установки
  make_rules
}

# compile [nowall] <source> <target> <compiler> <options>
# Одновременно вычисляются зависимости; пишется файл <target>.deps.
# Если установлена переменная CL_VERBOSE, то выдаются полная командная строка
# компиляции, иначе - только строка "Compiling <source> ..."
compile()
{
  source="$1"; target="$2"; comp="$3"; shift 3
  if test "$1" = "nowall"; then
    shift
    options="`echo $* | sed s/-Wall//g`"
  else
    options="$*"
  fi
  dep="$target.deps"
  if test "" = "$CL_VERBOSE"; then
    locale 2>/dev/null | awk -F '(=|")+' '
      $1=="LC_MESSAGES" && $2=="ru_RU.UTF-8" {
        print("Компилируется '"$source"' при помощи '"$comp"' ...")
        f=1
      }
      END { if (f!=1) print("Compiling '"$source"' using '"$comp"' ...") }'
  else
    echo "$comp $options -o $target $source"
  fi
  $comp $options -MMD -MF "$dep.tmp" -o "$target" "$source" || return 1
  tr '\n' ' ' < $dep.tmp | sed 's/[^ ]*://g; s/[\\]//g; s/$/:/' > $dep.tmp2
  echo >> $dep.tmp
  cat $dep.tmp2 >> $dep.tmp
  echo >> $dep.tmp
  rm -f $dep.tmp2
  if diff $dep $dep.tmp >/dev/null 2>&1; then
    rm -f $dep.tmp
  else
    rm -f $dep
    mv $dep.tmp $dep
  fi
  return 0
}

# link <target> command
# Команда должна быть указана посностью (в т.ч. с повторением target)
# Данная функция используется только для выдачи
link()
{
  target="$1"; shift
  if test "" = "$CL_VERBOSE"; then
    locale 2>/dev/null | awk -F '(=|")+' '
      $1=="LC_MESSAGES" && $2=="ru_RU.UTF-8" {
        print("Собирается '"$target"' ...")
        f=1
      }
      END { if (f!=1) print("Linking '"$target"' ...") }'
  else
    echo "$*"
  fi
  $*
}

command=$1
if test "$command" = ""; then
  echo "cvslvk: usage: cvslvk command [parameters]"
  exit 1
fi
shift

case "$command" in
  check_vars|error|get_arch|make_rules|setup_bd|remove_old_symlinks|\
  cleanall|process_wi|show_wi|liborder|touchap|\
  complete_wi|remove_wi|\
  install|build|show_ab|compile|link)
    $command $*
    exit $?
    ;;
  *)
    echo "cvslvk: unknown command: $command" 1>&2
    exit 1
    ;;
esac
