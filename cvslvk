#!/bin/sh
# Вспомогательный скрипт для работы с CVS в ЛВК

if test "$CL_DIR" = ""; then
  echo 'CL_DIR is not set' 1>&2
  exit 1
fi

# Файл, создаваемый по cvslvk make_rules
RULES_CVSLVK=$CL_DIR/rules.cvslvk
RULES_CVSLVK_TMP=$CL_DIR/rules.cvslvk.tmp  # Временная копия того же файла

# Группа пользователей CVS
CVSGROUP=cvsusers

# Полные имена следующих двух файлов получаются добавлением к ним -<arch>-<os>
# Префикс файла со списком рабочих инсталляций и их требований
WILIST=$CL_DIR/wilist
# Префикс файла кеширования запросов к process_wi
PROCESSWICACHE=$CL_DIR/wicache

MYPID=$$
kill_make()
{
  MAKEPID=`(echo $MYPID; ps -l) | awk -f $CL_DIR/getppid.awk`
  kill $MAKEPID;
  exit 1;
}


choose_chgrp_and_chmod()
{
  clgroup=`ls -Lld $CL_DIR | awk '{print($4)}'`
  if test "$clgroup" = "$CVSGROUP"; then
    CHGRP=chgrp
    CHMOD=chmod
  else
    CHGRP=true
    CHMOD=true
  fi
}


echo_build_error()
{
      echo 1>&2
      echo "*** ERROR ***" 1>&2
      echo 1>&2
}


# error сообщение
error()
{
  echo_build_error
  echo $* 1>&2
  echo 1>&2
  kill_make
}


# check_vars ИМЯ=значение ...
check_vars()
{
  res=0
  while test "$1" != ""; do
    tmp=`echo $1 | cut -f2 -d=`
    if test "$tmp" = ""; then
      var=`echo $1 | cut -f1 -d=`
      if test $res -eq 0; then echo_build_error; fi
      echo "$var is not set" 1>&2
      res=1
    fi
    shift
  done
  if test $res -eq 1; then echo 1>&2; kill_make; fi
}


# check_enum <имя_переменной>=<значение> <допустимые значения>
check_enum()
{
  var=`echo $1 | cut -d= -f1`
  value=`echo $1 | cut -d= -f2`
  shift
  for i in $*; do test "$value" = "$i" && return 0; done
  echo_build_error
  echo "Bad value '$value' of variable $var." 1>&2
  echo "Supported values are: $*." 1>&2
  echo 1>&2
  kill_make
}


# get_arch
get_arch()
{
  arch=`uname -m`
  case "$arch" in
    *86*)        echo x86   ;;
    sun*|sparc)  echo sparc ;;
    *)  error "get_arch: unsupported output from uname -m: $arch" ;;
  esac
}


# get_os
get_os()
{
  os=`uname -s`
  case "$os" in
    Linux|linux)  echo linux    ;;
    SunOS)        echo solaris  ;;
    *)  error "get_arch: unsupported output from uname -s: $os" ;;
  esac
}


# make_rules
# Создает $CL_DIR/rules.cvslvk и $CL_DIR/wilist*
make_rules()
{
  cd $CL_DIR

  echo "# This file is automatically generated by 'cvslvk make_rules'" > $RULES_CVSLVK_TMP
  for i in */rules.cvslvk; do
    if test -f $i; then
      dir=`dirname $i`
      echo >> $RULES_CVSLVK_TMP
      echo 'ifeq ($(findstring '$dir',$(CL_WI_LIST)), '$dir')' >> $RULES_CVSLVK_TMP
      echo 'override CL_WI = $(CL_DIR)'/$dir >> $RULES_CVSLVK_TMP
      echo '-include $(CL_DIR)/'$i >> $RULES_CVSLVK_TMP
      echo 'endif' >> $RULES_CVSLVK_TMP
    fi
  done
  mv $RULES_CVSLVK_TMP $RULES_CVSLVK
  choose_chgrp_and_chmod
  $CHGRP $CVSGROUP $RULES_CVSLVK
  $CHMOD 664 $RULES_CVSLVK

  rm -f $WILIST-* $PROCESSWICACHE-*
  for d in *_*; do if test -d $d; then
    postfix=`echo $d | cut -f2 -d_ | cut -f1-2 -d-`
    echo "$d `cat $d/depend.cvslvk 2>/dev/null | tr '\n' ' '`" >>  $WILIST-$postfix
  fi; done
  chmod u+r $WILIST-* 2>/dev/null
  $CHGRP $CVSGROUP $WILIST-* 2>/dev/null
  $CHMOD 664 $WILIST-* 2>/dev/null
}


# process_wi <фиксировать ли компилятор> <какой компилятор> <запросы модулей>
#   первый параметр: yes или unknown
#   второй параметр: gcc, suncc или any
#   возврат: первое слово - _suncc_, _gcc_ или _any_
#            дальше - список примененных WI
process_wi()
{
  postfix=`get_arch`-`get_os`
  key="$*"
  cache=$PROCESSWICACHE-$postfix
  wilist=$WILIST-$postfix

  res=`awk -F: '{if($1=="'"$key"'") print($2)}' $cache 2>/dev/null`
  if test "$res" != ""; then echo $res; return; fi

  needcomp="$1"; comp="$2"; shift; shift
  command="(echo $*; echo quiet $needcomp $comp; cat $wilist 2>/dev/null) | awk -f $CL_DIR/process_wi.awk"
  if eval $command >/dev/null; then
    res=`eval $command`;
    echo "$key:$res" >> $cache
    echo $res
    return
  fi

  echo_build_error
  eval $command 1>&2
  echo 1>&2
  echo "You may run \"make show_wi\" to see complete WI logic" 1>&2
  echo 1>&2
  kill_make
}

# show_wi <параметры process_wi>
show_wi()
{
  postfix=`get_arch`-`get_os`
  wilist=$WILIST-$postfix
  needcomp="$1"; comp="$2"; shift; shift
  (echo $*; echo verbose $needcomp $comp; cat $wilist 2>/dev/null) | awk -f $CL_DIR/process_wi.awk 1>&2
  kill_make
}


# depend <имя входного файла> <имя выходного файла> <параметры для cpp>
depend()
{
  cpp=cpp
  file=$1;  dep=$2;  shift 2
  echo "Calculating dependences for $file ..."
  (printf "%s `dirname $dep`/" $dep; $cpp -MM $* $file) > $dep.tmp
  if test $? -ne 0; then rm -f $dep $dep.tmp; return 1; fi
  sed s/.mm.o:/.o:/ $dep.tmp > $dep
  rm -f $dep.tmp
  return 0
}


# before_create_wi <полное имя инсталляции>
# Вызывается по make create_wi перед вызовом make all
before_create_wi()
{
  cd $CL_DIR
  if test -d $1; then
    echo_build_error
    echo "The working installation $1 already exists" 1>&2
    echo "If you wish, you may remove in by running" 1>&2
    echo "  cvslvk remove_wi $1" 1>&2
    echo 1>&2
    return 1
  fi

  mkdir $1
  if test $? -ne 0; then
    echo_build_error
    echo "Failed to create directory $CL_DIR/$1" 1>&2
    echo "Are you sure you are in cvsusers group ?" 1>&2
    echo 1>&2
    return 1
  fi
  rmdir $1
  return 0
}


# before_install_wi <полное имя инсталляции>
# Вызывается по make create_wi перед вызовом make all
before_install_wi()
{
  cd $CL_DIR
  mkdir $1
}


# complete_wi <полное имя инсталляции>
complete_wi()
{
  cd $CL_DIR
  choose_chgrp_and_chmod
  find $1 -exec $CHGRP $CVSGROUP \{\} \;
  find $1 -exec $CHMOD ug+rw \{\} \;
  find $1 -perm -100 -exec $CHMOD g+rwx \{\} \;
  find $1 -exec chmod a+r \{\} \;
  find $1 -perm -100 -exec chmod a+rx \{\} \;

  make_rules
}


# remove_wi <полное имя инсталляции> ...
remove_wi()
{
  cd $CL_DIR
  test $# -eq 0 && return 0

  for i in $*; do
    if test ! -d $i; then
      echo "No such working installation $i" 1>&2
      return 1;
    fi
    if test -f $i/NOREMOVE; then
      echo "$i/NOREMOVE file exists - skipping this WI"
      return 1
    fi
    rm -rf $i
  done

  make_rules
}


selfupdate()
{
  mkdir -p $CL_DIR/tmp/$USER
  choose_chgrp_and_chmod
  $CHGRP $CVSGROUP $CL_DIR/tmp 2>/dev/null
  $CHMOD 775 $CL_DIR/tmp 2>/dev/null
  cd $CL_DIR/tmp/$USER
  cvs checkout cvslvk > /dev/null
  cd cvslvk
  cpp -P process_wi.awk.in | tr '@' '\n' > process_wi.awk
  rm -f $CL_DIR/*.awk $CL_DIR/Makefile.cvslvk $CL_DIR/cvslvk
  cp Makefile.cvslvk cvslvk getppid.awk process_wi.awk $CL_DIR/
  cat foreign_modules | ( while read type name; do
    case "$type" in
      use_system)
        dir=$CL_DIR/$name'_'`get_arch`-`get_os`
        mkdir -p $dir 2>/dev/null
	chmod 755 $dir 2>/dev/null
	cp rules.cvslvk.$name $dir/rules.cvslvk 2>/dev/null
	cp depend.cvslvk.$name $dir/depend.cvslvk 2>/dev/null
	chmod 644 $dir/rules.cvslvk $dir/depend.cvslvk 2>/dev/null
        $CHGRP $CVSGROUP $dir $dir/rules.cvslvk $dir/depend.cvslvk 2>/dev/null
        $CHMOD g+w $dir $dir/rules.cvslvk $dir/depend.cvslvk 2>/dev/null
      ;;
      use_wi)
        for dir in $CL_DIR/$name'_'`get_arch`-`get_os`*; do
          if test ! -d $dir; then
	    echo "Warning: hand-made working installation for $name is not present"
	  else
	    touch $dir/NOREMOVE 2>/dev/null
	    cp rules.cvslvk.$name $dir/rules.cvslvk 2>/dev/null
	    cp depend.cvslvk.$name $dir/rules.cvslvk 2>/dev/null
	    chmod 644 $dir/rules.cvslvk $dir/depend.cvslvk 2>/dev/null
            $CHGRP $CVSGROUP $dir/rules.cvslvk $dir/depend.cvslvk 2>/dev/null
            $CHMOD g+w $dir/rules.cvslvk $dir/depend.cvslvk 2>/dev/null
	  fi
	done
      ;;
    esac
    done )
  cd $CL_DIR
  $CHGRP $CVSGROUP * 2>/dev/null
  $CHMOD ug+w * 2>/dev/null
  rm -r $CL_DIR/tmp/$USER/cvslvk
  make_rules
}


command=$1
if test "$command" = ""; then
  echo "cvslvk: usage: cvslvk command [parameters]"
  exit 1
fi
shift

case "$command" in
  check_vars|check_enum|error|get_arch|get_os|make_rules|\
  process_wi|show_wi|depend|\
  before_create_wi|before_install_wi|complete_wi|remove_wi|\
  selfupdate)
    $command $*
    exit $?
    ;;
  *)
    echo "cvslvk: unknown command: $command" 1>&2
    exit 1
    ;;
esac
