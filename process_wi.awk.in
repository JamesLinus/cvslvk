// Массив WI - полные имена инсталляций
// Массив WI_modules - имена модулей
// Массив WI_params - параметры
// Массив WI_req - списки требований
// (Эти массивы индексируются числами)
// Общее количество рабочих инсталляций - в переменной WI_total


// Добавления слова WORD к строке LIST через разделитель D
#define append(LIST,WORD,D)  { @\
  if ( LIST=="" )  { LIST=WORD }  else  { LIST=LIST""D""WORD } @\
  } @\

// Разбиение слова WORD на два поля, разделенные символом "_"
#define split_wi_string(WORD,MOD,REQ)  { @\
  split ( WORD, sws, "_" );  MOD = sws[1];  REQ = sws[2];  @\
  } @\

// Проверка, что в списке M1 есть все поля из списка M2
// Оба списка разделяются символами "-"
// Результат заносится в третий параметр
#define check_req(M1,M2,res)  { @\
  bn1 = split ( M1, ba1, "-" ); @\
  bn2 = split ( M2, ba2, "-" ); @\
  for ( bi2=1; bi2<=bn2; bi2++ )  { @\
    for ( bi1=1; bi1<=bn1; bi1++ )  if ( ba1[bi1]==ba2[bi2] )  break; @\
    if ( bi1>bn1 )  break; @\
    } @\
  if ( bi2>bn2 )  {res=1}  else  {res=0} @\
  } @\

// Проверка, что в списке M1 нет ни одного поля из списка M2
// Первый список символами "-", второй - пробелами
// Результат заносится в третий параметр
#define check_cnf(M1,M2,res)  { @\
  bn1 = split ( M1, ba1, "-" ); @\
  bn2 = split ( M2, ba2, " " ); @\
  for ( bi2=1; bi2<=bn2; bi2++ )  { @\
    for ( bi1=1; bi1<=bn1; bi1++ )  if ( ba1[bi1]==ba2[bi2] )  break; @\
    if ( bi1<=bn1 )  break; @\
    } @\
  if ( bi2>bn2 )  {res=1}  else  {res=0} @\
  } @\

// Получение и сортировка списка НОМЕРОВ доступных инсталляций модуля M
// Обязательные параметры - в строке RP, разделены символом "-"
// Недопустимые параметры - в строке ZP, разделены символом "-"
// Результат - в строку RES, разделить пробелами
#define get_available_wi(M,RP,ZP,RES)  { @\
  RES=""; @\
  for ( ai=1; ai<=WI_total; ai++ ) { @\
    if (WI_module[ai]==M) { @\
      check_req ( WI_params[ai], RP, af ); @\
      if ( af == 0 )  continue; @\
      check_cnf ( WI_params[ai], ZP, af ); @\
      if ( af == 0 )  continue; @\
      append ( RES, ai, " " ); @\
      } @\
    } @\
  } @\

// Сортировка списка инсталляций по качеству
// LIST - входной список номеров, RES - выходной список номеров
// optimized предпочитаем перед debug, shared предпочитаем перед static.
#define sort_wi_list(LIST,RES)  { @\
  an = split ( LIST, a, " " ) @\
  for ( ai=1; ai<=an; ai++ )  { @\
    aq[ai] = 0; @\
    am = split ( WI_params[a[ai]], a2, "-" ); @\
    for ( aj=1; aj<=am; aj++ )  { @\
      if ( a2[aj]=="gcc33" )  aq[ai]+=7; @\
      if ( a2[aj]=="gcc40" )  aq[ai]+=5; @\
      if ( a2[aj]=="gcc34" )  aq[ai]+=4; @\
      if ( a2[aj]=="optimized" )  aq[ai]+=2; @\
      if ( a2[aj]=="shared" )  aq[ai]+=1; @\
      } @\
    } @\
  RES=""; @\
  for ( ai=8; ai>=0; ai-- )  for ( aj=1; aj<=an; aj++ )  @\
    if ( aq[aj]==ai )  append ( RES, a[aj], " " ); @\
  } @\


// Занесение в RES отсортированного списка номеров доступных WI модуля MOD
// с требованиями RP, с учетом текущего значения conflicts
// c выводом комментариев, оттесненных на INDENT, в режиме verbose
#define get_wi_list(MOD,RP,RES,INDENT)  { @\
  get_available_wi ( MOD, RP, conflicts, gwltmp ); @\
  sort_wi_list ( gwltmp, RES ); @\
  if ( verbose )  { @\
    if ( conflicts != "" )  {vcfl = " (without " conflicts ")"}  else {vcfl = ""} @\
    if ( RP != "" )  {vrp = "_" RP}  else {vrp = ""}; @\
    print ( INDENT "WIs" vcfl " available for " MOD vrp ": " ); @\
    if ( RES == "" )  print ( INDENT " NONE" );  else  { @\
      gwln = split ( RES, gwla, " " ); @\
      for ( gwli=1; gwli<=gwln; gwli++ )  print ( INDENT " " WI[gwla[gwli]] ); @\
      } @\
    } @\
  } @\


// Получение имени компилятора из PARAMS в RES
#define find_comp_name(PARAMS,RES)  { @\
  fcnn = split ( PARAMS, fcna, "-" ); @\
  RES = ""; @\
  for ( fcni=1; fcni<=fcnn; fcni++ ) @\
    if ( (fcna[fcni]=="gcc40") || (fcna[fcni]=="gcc34") || (fcna[fcni]=="gcc33") || (fcna[fcni]=="gcc32") || (fcna[fcni]=="gcc295") || (fcna[fcni]=="gcc296") || (fcna[fcni]=="gcc") )  {RES=fcna[fcni]; break;} @\
  } @\

// Установка переменной conflicts в зависимости от текущей установки comp
// и comp_param
#define set_conflicts  { @\
  if ( comp=="gcc" || comp=="gcc295" )  {conflicts = "gcc40 gcc34 gcc33 gcc32 gcc296"} @\
  else if ( comp=="gcc40" || comp == "gcc34" )  {conflicts = "gcc33 gcc32 gcc295 gcc gcc296"} @\
  else if ( comp=="gcc32" || comp == "gcc33" )  {conflicts = "gcc40 gcc34 gcc295 gcc gcc296"} @\
  else if ( comp=="gcc296" )  {conflicts = "gcc40 gcc34 gcc33" "gcc32 gcc295 gcc"} @\
  else {conflicts = ""} @\
  } @\


// Первая строка - запросы
// Вторая строка - параметры:
//   $1: quiet | verbose
//   $2: need | compute (про comp_param)
//   $3: gcc40 | gcc34 | gcc33 | gcc32 | gcc295 | gcc296 | any
// Каждая из следующих строк - доступная рабочая инсталляция, после которой ее
//   требования
BEGIN  {
  getline;
  req_list = $0; 
  getline;
  if ( $1 == "verbose" )  {verbose=1}  else {verbose=0}
  comp_param = $2
  comp = $3
  WI_total = 0
}

{
  WI_total++;
  WI[WI_total] = $1;
  split_wi_string ( WI[WI_total], WI_module[WI_total], WI_params[WI_total] );
  WI_req[WI_total]=""
  for ( i=2; i<=NF; i++ )  append ( WI_req[WI_total], $i, " " );
}

END  {

 // Сначала получаем списки доступных инсталляций для каждого запроса.

  nreq = split ( req_list, req, " " );
  for ( i=1; i<=nreq; i++ )  split_wi_string ( req[i], module[i], params[i] );

  err=0
  set_conflicts;
  if ( verbose )  printf ( "\n" );
  for ( i=1; i<=nreq; i++ )  {
    get_wi_list ( module[i], params[i], clist[i], "" );
    if ( clist[i]=="" )  {
      print ( "No working installation available for " req[i] );
      err = 1;
      }
    }
  if ( err )  exit 1;

 // Будем выбирать комбинацию при помощи поиска вглубь.
 // В процессе поиска:
 //   n - глубина
 //   module[i] - имя i-го требуемого модуля 
 //   params[i] - требования к параметрам i-го требуемого модуля
 //   clist[i] - список НОМЕРОВ (индексов в WI) кандидатов на i-е требование
 //   try[i] - номер выбранного кандидата (из clist[i])
 //   candp[i] - его параметры
 //   nreq - количество требований (может меняться в процессе)
 //   saveds[n__m__k], savedr[n__m__k] - сохраненные требования.
 //     Сохранены при принятии кандидата m на место n, соответствуют
 //     требованию k
 //     Значения:
 //       saveds[]=0 - не использовалось
 //       saveds[]=1 - k-е требование появилось здесь
 //       saveds[]=2 - k-е требование появилось раньше;
 //         savedr[] содержит сохраненное требование к параметрам

 // Макрос для отката новых требований, внесенных текущим кандидатом на уровне n
#define n_cleanup  { @\
  for ( ncm=nreq; ncm>=n+1; ncm-- )  { @\
    ncind = n"__"try[n]"__"ncm; @\
    if ( saveds[ncind]==1 )  { @\
      module[ncm]=""; params[ncm]=""; clist[ncm]=""; nreq=ncm-1; @\
      delete saveds[ncind]; @\
      } @\
    else if ( saveds[ind]==2 )  { @\
      params[ncm] = savedp[ncind]; @\
      delete saveds[ncind];  delete savedp[ncind]; @\
      } @\
    } @\
  comp_param=save_cp[n]; comp=save_c[n]; @\
  } @\

  if ( verbose && (nreq>0) )  printf ( "\n" );

  save_cp[0] = comp_param;  save_c[0] = comp;
  n = 1;  try[1] = 0;

  while ( (n>0) && (n<=nreq) )  {	// Основной цикл поиска вглубь

    save_cp[n] = comp_param;  save_c[n] = comp;

    if ( verbose )  {
      indent="";  for ( v=1; v<n; v++ )  {indent=indent"    "}
      bindent=indent"  "
      }

    try[n]++;
    total = split ( clist[n], cand, " " );

   // Варианты исчерпались ?
    if ( try[n] > total )
      {n--; n_cleanup; set_conflicts; continue;}

   // Нет, еще есть вариант
    if ( verbose )  {
      if ( params[n]=="" )
        print ( indent "Trying to use " WI[cand[try[n]]] " for " module[n] );
      else
        print ( indent "Trying to use " WI[cand[try[n]]] " for " module[n] "_" params[n] );
      }

   // Сохраняем его параметры
    candp[n] = WI_params[cand[try[n]]];

   // Проверим, удовлетворяет ли он требованиям params[n]
   // (они могли измениться)
    check_req ( candp[n], params[n], res );
    if ( res==0 )  {
      if ( verbose )
        print ( bindent "Requirements " params[n] " are not met" );
      continue;
      }
    check_cnf ( candp[n], conflicts, res );
    if ( res==0 )  {
      if ( verbose )
        print ( bindent "Compiler conflict detected" );
      continue;
      }

   // Кандидат удовлетворяет требованиям.
   // Кандидат может вносить новое требование к компилятору
   // Первый же кандидат, в параметры которого входит компилятор, устанавливает
   // comp_param="need" и comp=<использованный компилятор>
    find_comp_name ( candp[n], tmpcomp );
    if ( tmpcomp == "gcc" )  tmpcomp = "gcc295"
    if ( tmpcomp != "" )  {
      comp_param="need"; comp=tmpcomp;  set_conflicts;
      if ( verbose && (save_cp[n-1]!="need") )
        print ( bindent "Setting compiler requirement to " comp );
      }

   // У кандидата могут быть свои требования.
   // Если это требования к модулю, для которого уже выбран кандидат, то
   //   просто проверяем, выполнены ли они.
   // Если это требования к модулю, который уже есть в списке req, то 
   //   добавляем их к текущим требованиям, сохранив старые
   // Если это требования к новому модулю, добавим модуль в req
   //   и увеличим nreq

    ncr = split ( WI_req[cand[try[n]]], cr, " " );
    vip = 1;
    for ( i=1; (i<=ncr) && (vip==1); i++ )  {
      split_wi_string ( cr[i], needm, needp );
      for ( j=1; j<=nreq; j++ )
        if ( module[j]==needm )  {
	  if ( j<=n )  {	// Кандидат уже выбран
	    check_req ( candp[j], needp, vip );
	    if ( verbose && (vip==0) )
	      print ( bindent "New requirements " cr[i] " are not met" );
	    }
	  else  {		// Кандидат еще не выбран, но модуль в списке
	    if ( needp!="" )  {
              if ( verbose )
	        print ( bindent "Appendind requirements " needp " to " needm "-" params[j] );
	      ind = n"__"try[n]"__"j;
	      saveds[ind] = 2;
	      savedp[ind] = params[j];
	      append ( params[j], needp, "-" );
	      }
	    }
	  break;
	  }
      if ( j<=nreq)  continue;
      if ( verbose )
        print ( bindent "Adding new module requirement " cr[i] );
      nreq++;
      module[nreq] = needm;
      params[nreq] = needp;
      saveds[n"__"try[n]"__"nreq] = 1;
      get_wi_list ( needm, needp, clist[nreq], bindent );
      if ( clist[nreq]=="" )  vip = 0;
      }

    if ( vip==0 )  {n_cleanup; continue;}

    n++;  try[n] = 0;
    
    }

  if ( n==0 )  {
    print ( "Can't resolve module dependences" );
    exit 1;
    }

  if ( verbose )  {
    printf ( "\n" );
    if ( comp_param=="need" )
      print ( "Compiler build parameter is needed" );
    else
      print ( "Compiler build parameter is not needed" );
    }
  else  {
    if ( comp_param=="need" )
      printf ( "comp_param_needed " );
    else
      printf ( "comp_param_not_needed " )
    }

  if ( verbose )  {
    if ( comp=="any" )
      print ( "Any compiler may be used" );
    else
      print ( "Compiler should be " comp );
    }
  else printf ( comp );

  if ( verbose )  print ( "Use working installations:" );
  for ( i=1; i<=nreq; i++ )  {
    split ( clist[i], cand, " " );
    if ( verbose )
      print ( "  " WI[cand[try[i]]] );
    else
      printf ( " " WI[cand[try[i]]] );
    }
  printf ( "\n" )
  exit 0;
}
